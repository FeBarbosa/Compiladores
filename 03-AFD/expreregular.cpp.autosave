#include "expreregular.h"
#include <iostream>

// CONSTRUTOR -------------------------------------------------
ExpreRegular::ExpreRegular(string s):inFix(s), posFix(""){}

// Verifica se um caracter é um operador ----------------------
bool ExpreRegular::operador(char c)
{
    if(c == '*' || c == '+' || c == '.')
        return true;

    return false;
}

//-------------------------------------------------------------
//PRECEDENCIA: Fecho de kleene, concatenação, unição
// Verifica a precedência entre dois operadores
bool ExpreRegular::precedencia(char operador1, char operador2)
{
    if(operador1 == operador2)
        return true;

    if(operador1 != '+' && operador2 != '+')
    {
        if(operador1 == '*') //operador1 tem maior precedência (*, .)
            return true;
        else                 //operador2 tem maior precedência (., *)
            return false;
    }

    if(operador1 != '+')     //operador1 tem maior precedência (*, +) ou (., +)
        return true;

    return false;            //operador2 tem maior precedência (+, *) ou (+, .)
}

// Converte uma expressão inFixa para posFixa -----------------
/**
    Retornos:
        * -1: fechamento de parênteses sem abertura
        *  0: abertura de parênteses sem fechamento
        *  1: operador sem operando
        *  2: expressão válida
**/
int ExpreRegular::infParaPos()
{
    int aux = 0; //Controle para concatenação implícita
    string pilha = ""; //inicializa a pilha com string vazia
    char op; //auxiliar para operações com operador

    for(int i= 0; i < (int)this->inFix.length(); i++)
    {
        //OPERADOR
        //if(operador(this->inFix[i]) || (aux && !operador(this->inFix[i]) && this->inFix[i] != ')'))
        if(operador(this->inFix[i]) || (aux && !operador(this->inFix[i]) && this->inFix[i] != ')'))
        {
            if(aux && !operador(this->inFix[i])) //concatenação implícita
            {
                op = '.';
                i--;
                aux = 0;
            }
            else
                op =  this->inFix[i];

            while(!pilha.empty() && pilha.back() != '(' && precedencia(pilha.back(), op))
            {
                this->posFix.push_back(pilha.back());
                pilha.pop_back();
            }

            pilha.push_back(op); //empilha o perador atual

            aux = (op == '*' ? 1:0); // possibilidade de concatenação implícita depois de fecho de kleene
        }
        else if(inFix[i] == '(') // ABERTURA DE PARÊNTESE
        {
            pilha.push_back(inFix[i]);
        }
        else if(inFix[i] == ')') // FECHAMENTO DE PARÊNTESE
        {
            while(pilha.back() != '(' && !pilha.empty()) // Retira da pilha e coloca na posfixa
            {
                this->posFix.push_back(pilha.back());
                pilha.pop_back();
            }
            if(pilha.empty()) // Fechamento de parênteses sem abertura
                return -1;

            pilha.pop_back();
            aux = 1;
        }
        else // OPERANDO --------------------------------------
        {
            this->posFix.push_back(inFix[i]); // Insere o operando atual
            aux = 1; // indica que o último elemento da posFix é um operando
        }
    }

    while(!pilha.empty())
    {
        if(pilha.back() == '(') // Abertura de parênteses sem fechamento
            return 0;

        this->posFix.push_back(pilha.back());
        pilha.pop_back();
    }

    return 2;
}

// Verifica se a expressão pósfixa é válida -------------------
bool ExpreRegular::verificarExpressaoPosfixa()
{
    string pilha = ""; // pilha de operandos

    for(int i = 0; i < (int)this->posFix.length(); i ++)
    {
        if(!operador(this->posFix[i])) // Se não for um operador empilha
        {
            pilha.push_back(this->posFix[i]);
        }
        else                          // Trata-se de um operador
        {
            if(!pilha.empty())       // Verifica se existe pelo menos um operando
            {
                if(this->posFix[i] == '*') // Trata-se do operador unário fecho de kleene
                {
                    continue;
                }
                else                       // Trata-se de um operador binário
                {
                    pilha.pop_back();      // Desempilha o operando do topo
                    if(!pilha.empty())
                        continue;
                    else
                        return false;
                }
            }
            else
                return false;
        }

    }

    if(pilha.empty()) // Se a pilha estiver vazia, houve erro
        return false;

    pilha.pop_back();

    if(!pilha.empty()) // Se houver mais de um elemento na pilha, houve erro
        return false;

    return true;

}
